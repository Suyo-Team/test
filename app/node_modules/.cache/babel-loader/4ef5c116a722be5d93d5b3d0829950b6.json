{"ast":null,"code":"import _slicedToArray from\"/root/Documents/Workspaces/tests/suyo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from'react';import AuthContext from'../context/AuthContext';import{loginUser,registerUser}from'../services/auth';import{jsx as _jsx}from\"react/jsx-runtime\";var initialUser=function initialUser(){return JSON.parse(localStorage.getItem('user'))||{logged:false};};var AuthProvider=function AuthProvider(_ref){var children=_ref.children;var _useState=useState(initialUser),_useState2=_slicedToArray(_useState,2),user=_useState2[0],setUser=_useState2[1];var login=function login(userToLogin){var loginName=userToLogin.username,password=userToLogin.password;var isEmail=/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;var loggedUser=isEmail.test(loginName)?{email:loginName,password:password}:userToLogin;loginUser(loggedUser).then(function(userDB){if(userDB){var username=userDB.username,token=userDB.token;setUser({username:username,token:token,isLogged:true});}}).catch(function(err){return console.log(err);});};var logout=function logout(){return setUser({isLogged:false});};var register=function register(userToRegister){registerUser(userToRegister).then(function(userDB){console.log(userDB);if(userDB){var username=userDB.username,token=userDB.token;setUser({username:username,token:token,isLogged:true});}}).catch(function(err){return console.log(err);});};useEffect(function(){localStorage.setItem('user',JSON.stringify(user));},[user]);return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{user:user,login:login,logout:logout,register:register},children:children});};export default AuthProvider;","map":{"version":3,"sources":["/root/Documents/Workspaces/tests/suyo/app/src/providers/AuthProvider.jsx"],"names":["useEffect","useState","AuthContext","loginUser","registerUser","initialUser","JSON","parse","localStorage","getItem","logged","AuthProvider","children","user","setUser","login","userToLogin","loginName","username","password","isEmail","loggedUser","test","email","then","userDB","token","isLogged","catch","err","console","log","logout","register","userToRegister","setItem","stringify"],"mappings":"4JAAA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CAGA,MAAOC,CAAAA,WAAP,KAAwB,wBAAxB,CAEA,OAASC,SAAT,CAAoBC,YAApB,KAAwC,kBAAxC,C,2CAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,SAAMC,CAAAA,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,GAA4C,CAAEC,MAAM,CAAE,KAAV,CAAlD,EAApB,CAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,MAAkB,IAAfC,CAAAA,QAAe,MAAfA,QAAe,CACrC,cAAwBX,QAAQ,CAACI,WAAD,CAAhC,wCAAOQ,IAAP,eAAaC,OAAb,eAEA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAACC,WAAD,CAAiB,CAC7B,GAAkBC,CAAAA,SAAlB,CAA0CD,WAA1C,CAAQE,QAAR,CAA6BC,QAA7B,CAA0CH,WAA1C,CAA6BG,QAA7B,CACA,GAAMC,CAAAA,OAAO,CAAG,uJAAhB,CACA,GAAMC,CAAAA,UAAU,CAAGD,OAAO,CAACE,IAAR,CAAaL,SAAb,EAA0B,CAAEM,KAAK,CAAEN,SAAT,CAAoBE,QAAQ,CAARA,QAApB,CAA1B,CAA2DH,WAA9E,CACAb,SAAS,CAACkB,UAAD,CAAT,CACGG,IADH,CACQ,SAACC,MAAD,CAAY,CAChB,GAAIA,MAAJ,CAAY,CACV,GAAQP,CAAAA,QAAR,CAA4BO,MAA5B,CAAQP,QAAR,CAAkBQ,KAAlB,CAA4BD,MAA5B,CAAkBC,KAAlB,CACAZ,OAAO,CAAC,CACNI,QAAQ,CAARA,QADM,CAENQ,KAAK,CAALA,KAFM,CAGNC,QAAQ,CAAE,IAHJ,CAAD,CAAP,CAKD,CACF,CAVH,EAWGC,KAXH,CAWS,SAACC,GAAD,QAASC,CAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAT,EAXT,EAYD,CAhBD,CAkBA,GAAMG,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,SAAMlB,CAAAA,OAAO,CAAC,CAAEa,QAAQ,CAAE,KAAZ,CAAD,CAAb,EAAf,CAEA,GAAMM,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,cAAD,CAAoB,CACnC9B,YAAY,CAAC8B,cAAD,CAAZ,CACGV,IADH,CACQ,SAACC,MAAD,CAAY,CAChBK,OAAO,CAACC,GAAR,CAAYN,MAAZ,EACA,GAAIA,MAAJ,CAAY,CACV,GAAQP,CAAAA,QAAR,CAA4BO,MAA5B,CAAQP,QAAR,CAAkBQ,KAAlB,CAA4BD,MAA5B,CAAkBC,KAAlB,CACAZ,OAAO,CAAC,CACNI,QAAQ,CAARA,QADM,CAENQ,KAAK,CAALA,KAFM,CAGNC,QAAQ,CAAE,IAHJ,CAAD,CAAP,CAKD,CACF,CAXH,EAYGC,KAZH,CAYS,SAACC,GAAD,QAASC,CAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAT,EAZT,EAaD,CAdD,CAgBA7B,SAAS,CAAC,UAAM,CACdQ,YAAY,CAAC2B,OAAb,CAAqB,MAArB,CAA6B7B,IAAI,CAAC8B,SAAL,CAAevB,IAAf,CAA7B,EACD,CAFQ,CAEN,CAACA,IAAD,CAFM,CAAT,CAIA,mBACE,KAAC,WAAD,CAAa,QAAb,EAAsB,KAAK,CAAE,CAAEA,IAAI,CAAJA,IAAF,CAAQE,KAAK,CAALA,KAAR,CAAeiB,MAAM,CAANA,MAAf,CAAuBC,QAAQ,CAARA,QAAvB,CAA7B,UACGrB,QADH,EADF,CAKD,CAhDD,CAsDA,cAAeD,CAAAA,YAAf","sourcesContent":["import { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport AuthContext from '../context/AuthContext';\n\nimport { loginUser, registerUser } from '../services/auth';\n\nconst initialUser = () => JSON.parse(localStorage.getItem('user')) || { logged: false };\n\nconst AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(initialUser);\n\n  const login = (userToLogin) => {\n    const { username: loginName, password } = userToLogin;\n    const isEmail = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    const loggedUser = isEmail.test(loginName) ? { email: loginName, password } : userToLogin;\n    loginUser(loggedUser)\n      .then((userDB) => {\n        if (userDB) {\n          const { username, token } = userDB;\n          setUser({\n            username,\n            token,\n            isLogged: true,\n          });\n        }\n      })\n      .catch((err) => console.log(err));\n  };\n\n  const logout = () => setUser({ isLogged: false });\n\n  const register = (userToRegister) => {\n    registerUser(userToRegister)\n      .then((userDB) => {\n        console.log(userDB);\n        if (userDB) {\n          const { username, token } = userDB;\n          setUser({\n            username,\n            token,\n            isLogged: true,\n          });\n        }\n      })\n      .catch((err) => console.log(err));\n  };\n\n  useEffect(() => {\n    localStorage.setItem('user', JSON.stringify(user));\n  }, [user]);\n\n  return (\n    <AuthContext.Provider value={{ user, login, logout, register }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nAuthProvider.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n\nexport default AuthProvider;\n"]},"metadata":{},"sourceType":"module"}