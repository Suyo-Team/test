{"ast":null,"code":"import _slicedToArray from\"/root/Documents/Workspaces/tests/suyo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useCallback,useRef,useState}from'react';import{GoogleMap,Marker,InfoWindow,useJsApiLoader}from'@react-google-maps/api';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var containerStyle={width:'100%',height:'100%'};var center={lat:6.2471638,lng:-75.5765707};var Map=function Map(_ref){var plots=_ref.plots;var _useJsApiLoader=useJsApiLoader({googleMapsApiKey:'AIzaSyDODLwbcfIZ9-W3Lw0ky0hAVjBYdRZAms8'}),isLoaded=_useJsApiLoader.isLoaded,loadError=_useJsApiLoader.loadError;var mapRef=useRef();var _useState=useState(null),_useState2=_slicedToArray(_useState,2),selected=_useState2[0],setSelected=_useState2[1];var onMapLoad=useCallback(function(mapInstance){mapRef.current=mapInstance;},[]);return/*#__PURE__*/_jsxs(_Fragment,{children:[loadError&&/*#__PURE__*/_jsx(\"h1\",{children:\"Error\"}),isLoaded?/*#__PURE__*/_jsxs(GoogleMap,{mapContainerStyle:containerStyle,center:center,zoom:12,onLoad:onMapLoad,children:[plots.map(function(plot){return/*#__PURE__*/_jsx(Marker,{position:plot.coords,onClick:function onClick(){return setSelected(plot);}},plot.id);}),selected?/*#__PURE__*/_jsx(InfoWindow,{position:selected.coords,children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:selected.owner}),/*#__PURE__*/_jsx(\"p\",{style:{marginTop:'5px',fontSize:'15px'},children:selected.address})]})}):null]}):/*#__PURE__*/_jsx(\"h1\",{children:\"Loading...\"})]});};export default Map;","map":{"version":3,"sources":["/root/Documents/Workspaces/tests/suyo/app/src/components/Maps/Map.jsx"],"names":["useCallback","useRef","useState","GoogleMap","Marker","InfoWindow","useJsApiLoader","containerStyle","width","height","center","lat","lng","Map","plots","googleMapsApiKey","isLoaded","loadError","mapRef","selected","setSelected","onMapLoad","mapInstance","current","map","plot","coords","id","owner","marginTop","fontSize","address"],"mappings":"4JAAA,OAASA,WAAT,CAAsBC,MAAtB,CAA8BC,QAA9B,KAA8C,OAA9C,CACA,OAASC,SAAT,CAAoBC,MAApB,CAA4BC,UAA5B,CAAwCC,cAAxC,KAA8D,wBAA9D,C,6IAGA,GAAMC,CAAAA,cAAc,CAAG,CACrBC,KAAK,CAAE,MADc,CAErBC,MAAM,CAAE,MAFa,CAAvB,CAKA,GAAMC,CAAAA,MAAM,CAAG,CACbC,GAAG,CAAE,SADQ,CAEbC,GAAG,CAAE,CAAC,UAFO,CAAf,CAKA,GAAMC,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,MAAe,IAAZC,CAAAA,KAAY,MAAZA,KAAY,CACzB,oBAAgCR,cAAc,CAAC,CAC7CS,gBAAgB,CAAE,yCAD2B,CAAD,CAA9C,CAAQC,QAAR,iBAAQA,QAAR,CAAkBC,SAAlB,iBAAkBA,SAAlB,CAGA,GAAMC,CAAAA,MAAM,CAAGjB,MAAM,EAArB,CACA,cAAgCC,QAAQ,CAAC,IAAD,CAAxC,wCAAOiB,QAAP,eAAiBC,WAAjB,eAEA,GAAMC,CAAAA,SAAS,CAAGrB,WAAW,CAAC,SAACsB,WAAD,CAAiB,CAC7CJ,MAAM,CAACK,OAAP,CAAiBD,WAAjB,CACD,CAF4B,CAE1B,EAF0B,CAA7B,CAGA,mBACE,2BACIL,SAAS,eAAI,6BADjB,CAGID,QAAQ,cAEJ,MAAC,SAAD,EACE,iBAAiB,CAAET,cADrB,CAEE,MAAM,CAAEG,MAFV,CAGE,IAAI,CAAE,EAHR,CAIE,MAAM,CAAEW,SAJV,WAOIP,KAAK,CAACU,GAAN,CAAU,SAACC,IAAD,qBACR,KAAC,MAAD,EAEE,QAAQ,CAAEA,IAAI,CAACC,MAFjB,CAGE,OAAO,CAAE,yBAAMN,CAAAA,WAAW,CAACK,IAAD,CAAjB,EAHX,EACOA,IAAI,CAACE,EADZ,CADQ,EAAV,CAPJ,CAiBIR,QAAQ,cAEJ,KAAC,UAAD,EAAY,QAAQ,CAAEA,QAAQ,CAACO,MAA/B,uBACE,oCACE,oBAAKP,QAAQ,CAACS,KAAd,EADF,cAEE,UAAG,KAAK,CAAE,CAAEC,SAAS,CAAE,KAAb,CAAoBC,QAAQ,CAAE,MAA9B,CAAV,UACGX,QAAQ,CAACY,OADZ,EAFF,GADF,EAFI,CAWJ,IA5BR,GAFI,cAkCJ,kCArCR,GADF,CA0CD,CApDD,CA0DA,cAAelB,CAAAA,GAAf","sourcesContent":["import { useCallback, useRef, useState } from 'react';\nimport { GoogleMap, Marker, InfoWindow, useJsApiLoader } from '@react-google-maps/api';\nimport PropTypes from 'prop-types';\n\nconst containerStyle = {\n  width: '100%',\n  height: '100%',\n};\n\nconst center = {\n  lat: 6.2471638,\n  lng: -75.5765707,\n};\n\nconst Map = ({ plots }) => {\n  const { isLoaded, loadError } = useJsApiLoader({\n    googleMapsApiKey: 'AIzaSyDODLwbcfIZ9-W3Lw0ky0hAVjBYdRZAms8',\n  });\n  const mapRef = useRef();\n  const [selected, setSelected] = useState(null);\n\n  const onMapLoad = useCallback((mapInstance) => {\n    mapRef.current = mapInstance;\n  }, []);\n  return (\n    <>\n      { loadError && <h1>Error</h1> }\n      {\n        isLoaded\n          ? (\n            <GoogleMap\n              mapContainerStyle={containerStyle}\n              center={center}\n              zoom={12}\n              onLoad={onMapLoad}\n            >\n              {\n                plots.map((plot) => (\n                  <Marker\n                    key={plot.id}\n                    position={plot.coords}\n                    onClick={() => setSelected(plot)}\n                  />\n                ))\n              }\n\n              {\n                selected\n                  ? (\n                    <InfoWindow position={selected.coords}>\n                      <div>\n                        <h2>{selected.owner}</h2>\n                        <p style={{ marginTop: '5px', fontSize: '15px' }}>\n                          {selected.address}\n                        </p>\n                      </div>\n                    </InfoWindow>\n                  )\n                  : null\n              }\n            </GoogleMap>\n          )\n          : <h1>Loading...</h1>\n      }\n    </>\n  );\n};\n\nMap.propTypes = {\n  plots: PropTypes.array.isRequired,\n};\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}